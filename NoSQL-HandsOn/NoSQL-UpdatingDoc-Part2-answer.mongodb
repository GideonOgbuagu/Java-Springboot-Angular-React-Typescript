// MongoDB Playground


// Select the database to use.
use('myFirstDatabase');

// The drop() command destroys all data from a collection.
db.inventory.drop();
// // Make sure you run it against the correct database and collection.
db.inventory.insertMany([
  {
    item: 'sticky note pads',
    size: { height: 8.9, width: 9, uom: 'cm' },
    status: 'B',
    quantity: 5
  },
  {
    item: 'pens',
    size: { height: 12, width: 1.3, uom: 'cm' },
    status: 'A',
    quantity: 4
  },
  {
    item: 'pencils',
    size: { height: 13, width: 1.4, uom: 'cm' },
    status: 'D',
    quantity: 10
  },
  {
    item: 'clipboard',
    size: { height: 13, width: 7, uom: 'in' },
    status: 'B',
    quantity: 2
  },
  {
    item: 'printer ink',
    size: { height: 2, width: 3, uom: 'in' },
    status: 'C',
    quantity: 2
  }
]);

db.inventory.find({});

// The company you are working for wants to update their inventory database. Currently, there are ten pieces of inventory in the database. They want to give each product a rating of 4 stars to start, as well as a field that shows if it has been rated yet using a boolean. They would like this to be reflected in the database as rating with two fields: numberOfStars, and hasBeenRated. Also, they want to double the quantity of every product since the company is rapidly growing. Lastly, they would like you to find all products that are sized using centimeters and give them a status of "B".

db.inventory.updateMany({}, {$set: {"rating": {"numberOfStars": 4, "hasBeenRated": true}}}, {upsert: true});

db.inventory.updateMany({}, {$mul: {quantity: 2}});

db.inventory.find({});

db.inventory.updateMany({"size.uom": "cm"}, { $set: {status: "B"}}, upsert: true);

db.inventory.find({});




